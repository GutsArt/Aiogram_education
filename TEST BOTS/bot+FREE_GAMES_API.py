# https://www.gamerpower.com/api-read

import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from config import BOT_TOKEN, ADMIN_CHAT_ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

FREE_GAMES_API = "https://www.gamerpower.com/api/giveaways?platform=epic-games-store"

# —Å–ø–∏—Å–æ–∫ id —Ä–∞–∑–¥–∞—á, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
known_giveaways = set()


async def fetch_free_games():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–∞—á –∏–∑ API"""
    try:
        resp = requests.get(FREE_GAMES_API, timeout=10)
        resp.raise_for_status()
        return resp.json()
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []


def format_game_info(game):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ"""
    title = game.get("title", "No title")
    worth = game.get("worth", "N/A")

    description = game.get("description", "No description")
    logging.info(f"–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã: {description}")

    status = game.get("status", "N/A")
    date = game.get("end_date", "N/A")

    game_url = game.get("open_giveaway_url", "")
    try:
        slug = game_url.split("open/")[-1].split("-epic-games")[0]
        game_url = f"https://store.epicgames.com/en-US/browse?q={slug}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ URL –∏–≥—Ä—ã: {e}")
        game_url = "https://store.epicgames.com/en-US/free-games"

    return (
        f"‚Ä¢ <code>{title}</code> - {status} (–¥–æ {date})\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {worth}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        f"üîó <a href=\"{game_url}\">Epic Games</a>\n\n"
    )


@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ –Ω–æ–≤—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö.")
    print(f"–¢–≤–æ–π chat.id: {message.chat.id}")


@dp.message(Command("info"))
async def send_free_games_info(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /info ‚Äî –≤—Ä—É—á–Ω—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä"""
    games = await fetch_free_games()
    if not games:
        await message.answer("üéÆ –°–µ–π—á–∞—Å –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä –≤ Epic Games Store.")
        return

    reply_text = "üéÆ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã —Å–µ–π—á–∞—Å –≤ Epic Games Store:\n\n"
    for game in games:
        reply_text += format_game_info(game)

    await message.answer(reply_text, parse_mode="HTML")


async def check_updates():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞–∑ –≤ —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–∞—á–∏"""
    global known_giveaways
    while True:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        games = await fetch_free_games()
        if not games:
            await asyncio.sleep(3600)
            continue

        new_games = []
        for game in games:
            game_id = game.get("id")
            if game_id not in known_giveaways:
                known_giveaways.add(game_id)
                new_games.append(game)

        if new_games:
            text = "üÜï –ù–æ–≤—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –≤ Epic Games Store!\n\n"
            for g in new_games:
                text += format_game_info(g)
            try:
                await bot.send_message(ADMIN_CHAT_ID, text, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await asyncio.sleep(3600)  # –∂–¥–∞—Ç—å 1 —á–∞—Å (3600 —Å–µ–∫)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    asyncio.create_task(check_updates())  # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.run(main())

